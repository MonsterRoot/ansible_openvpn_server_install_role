---

- name: Print Settings
  debug:
    msg: 
    - "openvpn_net: {{ openvpn_net }}"
    - "openvpn_mask: {{ openvpn_mask }}"
    - "openvpn_mask_short: {{ openvpn_mask_short }}"
    - "openvpn_port: {{ openvpn_port }}"
    - "openvpn_proto: {{ openvpn_proto }}"
    - "openvpn_dev: {{ openvpn_dev }}"
    - "openvpn_country: {{ openvpn_country }}"
    - "openvpn_province: {{ openvpn_province }}"
    - "openvpn_city: {{ openvpn_city }}"
    - "openvpn_org: {{ openvpn_org }}"
    - "openvpn_email: {{ openvpn_email }}"
    - "openvpn_ou: {{ openvpn_ou }}"

- name: Install OpenVPN, Easy-RSA, iptables, iptables-persistent in Ubuntu
  apt:
    name:
      - openvpn
      - easy-rsa
      - iptables
      - iptables-persistent
    state: present
    update_cache: yes
  when: ansible_distribution == "Ubuntu"



- name: Create Easy-RSA directory
  file:
    path: /etc/openvpn/easy-rsa
    state: directory
  

- name: Copy Easy-RSA scripts
  shell: cp -r /usr/share/easy-rsa/* /etc/openvpn/easy-rsa/
  args:
    creates: /etc/openvpn/easy-rsa/easyrsa

- name: Initialize the PKI
  command: ./easyrsa init-pki
  args:
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki

- name: Build the CA
  command: ./easyrsa build-ca nopass
  args:
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki/ca.crt
  environment:
    EASYRSA_BATCH: "yes"
    EASYRSA_REQ_CN: "OpenVPN-CA"
    EASYRSA_REQ_COUNTRY: "{{ openvpn_country }}"
    EASYRSA_REQ_PROVINCE: "{{ openvpn_province }}"
    EASYRSA_REQ_CITY: "{{ openvpn_city }}"
    EASYRSA_REQ_ORG: "{{ openvpn_org }}"
    EASYRSA_REQ_EMAIL: "{{ openvpn_email }}"
    EASYRSA_REQ_OU: "{{ openvpn_ou }}"

- name: Generate server certificate and key
  command: ./easyrsa build-server-full server nopass
  args:
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki/issued/server.crt

- name: Generate Diffie-Hellman key
  command: ./easyrsa gen-dh
  args:
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki/dh.pem

- name: Generate HMAC signature
  command: openvpn --genkey --secret ta.key
  args:
    chdir: /etc/openvpn/easy-rsa/pki
    creates: /etc/openvpn/easy-rsa/pki/ta.key

- name: Create certs directory
  file:
    path: /etc/openvpn/certs
    state: directory

- name: Copy server certificate and key
  copy:
    src: "/etc/openvpn/easy-rsa/pki/private/server.key"
    dest: "/etc/openvpn/certs/server.key"
    remote_src: yes
  notify: restart openvpn

- name: Copy server certificate
  copy:
    src: "/etc/openvpn/easy-rsa/pki/issued/server.crt"
    dest: "/etc/openvpn/certs/server.crt"
    remote_src: yes
  notify: restart openvpn

- name: Copy CA certificate
  copy:
    src: "/etc/openvpn/easy-rsa/pki/ca.crt"
    dest: "/etc/openvpn/certs/ca.crt"
    remote_src: yes
  notify: restart openvpn

- name: Copy Diffie-Hellman key
  copy:
    src: "/etc/openvpn/easy-rsa/pki/dh.pem"
    dest: "/etc/openvpn/certs/dh.pem"
    remote_src: yes
  notify: restart openvpn

- name: Copy HMAC signature
  copy:
    src: "/etc/openvpn/easy-rsa/pki/ta.key"
    dest: "/etc/openvpn/certs/ta.key"
    remote_src: yes
  notify: restart openvpn

- name: Deploy OpenVPN server configuration
  template:
    src: server.conf.j2
    dest: /etc/openvpn/server.conf
  notify: restart openvpn

- name: Enable and start OpenVPN service
  systemd:
    name: openvpn@server
    enabled: yes
    state: started

- name: Generate client certificate and key
  command: ./easyrsa build-client-full "client_{{ inventory_hostname }}" nopass
  args:
    chdir: /etc/openvpn/easy-rsa
    creates: "/etc/openvpn/easy-rsa/pki/issued/client_{{ inventory_hostname }}.crt"

- name: Fetch CA certificate
  slurp:
    src: "/etc/openvpn/easy-rsa/pki/ca.crt"
  register: ca_cert_content
  delegate_to: "{{ inventory_hostname }}"

- name: Fetch client certificate
  slurp:
    src: "/etc/openvpn/easy-rsa/pki/issued/client_{{ inventory_hostname }}.crt"
  register: client_cert_content
  delegate_to: "{{ inventory_hostname }}"

- name: Fetch client key
  slurp:
    src: "/etc/openvpn/easy-rsa/pki/private/client_{{ inventory_hostname }}.key"
  register: client_key_content
  delegate_to: "{{ inventory_hostname }}"

- name: Fetch TLS auth key
  slurp:
    src: "/etc/openvpn/easy-rsa/pki/ta.key"
  register: ta_key_content
  delegate_to: "{{ inventory_hostname }}"

- name: Ensure net.ipv4.ip_forward is set to 1 in /etc/sysctl.conf
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^#?net\.ipv4\.ip_forward\s*='
    line: 'net.ipv4.ip_forward = 1'
    state: present
  register: sysctl_conf

- name: Apply sysctl settings
  command: sysctl -p
  args:
    warn: false
  when: sysctl_conf.changed

- name: Get the default route interface
  command: ip route show default
  register: default_route

- name: Extract the interface name from the default route
  set_fact:
    internet_interface: "{{ default_route.stdout.split()[-2] }}"

- name: Debug the internet interface name
  debug:
    msg: "The internet-facing interface is {{ internet_interface }}"

- name: Fetch external IP address
  uri:
    url: http://ifconfig.co/ip
    return_content: yes
  register: external_ip

- name: Print external IP address
  debug:
    msg: "The external IP address is {{ external_ip.content | trim }}"

- name: Check if iptables rule for NAT is already present
  command: iptables -t nat -C POSTROUTING -s {{ openvpn_net }}{{ openvpn_mask_short }} -o {{ internet_interface }} -j MASQUERADE
  register: iptables_rule_check
  ignore_errors: yes

- name: Add iptables rule for NAT if not present
  command: iptables -t nat -A POSTROUTING -s {{ openvpn_net }}{{ openvpn_mask_short }} -o {{ internet_interface }} -j MASQUERADE
  when: iptables_rule_check.rc != 0

- name: Save iptables rules for NAT
  command: netfilter-persistent save
  when: iptables_rule_check.rc != 0

- name: Generate client configuration file
  template:
    src: client.conf.j2
    dest: "client_{{ inventory_hostname }}.ovpn"
  delegate_to: localhost
  vars:
    ca_cert: "{{ ca_cert_content['content'] | b64decode }}"
    client_cert: "{{ client_cert_content['content'] | b64decode }}"
    client_key: "{{ client_key_content['content'] | b64decode }}"
    ta_key: "{{ ta_key_content['content'] | b64decode }}"
  notify: restart openvpn
  become: true
